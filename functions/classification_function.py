import pandas as pd
import numpy as np
import sklearn
from sklearn.model_selection import KFold
from sklearn import svm
from sklearn.model_selection import cross_val_score,cross_val_predict
from tqdm import tqdm # show progress bar
from sklearn.metrics import accuracy_score,roc_auc_score
from sklearn.metrics import precision_recall_fscore_support
import roc_utils as ru

def kfold(X,y,random_state=1):
    roc = []
    accuracy = []
    sensitivity = []
    specificity = []
    kf = KFold(n_splits=10, random_state=random_state, shuffle=True)
    for train_index, test_index in kf.split(X):
        X_train, X_test = X.iloc[train_index], X.iloc[test_index]
        y_train, y_test = y.iloc[train_index], y.iloc[test_index]
        #build and fit svm model
        clf = svm.SVC(kernel="linear",random_state=0,cache_size=7000)
        clf.fit(X_train,y_train)
        #predict
        y_pred = clf.predict(X_test)
        roc.append(roc_auc_score(y_test, y_pred))
        accuracy.append(accuracy_score(y_test, y_pred))
        sensitivity.append(precision_recall_fscore_support(y_test,y_pred,pos_label=True,average=None)[1][0])
        specificity.append(precision_recall_fscore_support(y_test,y_pred,pos_label=True,average=None)[1][1])
            
    return([roc,accuracy,sensitivity,specificity])

def kfold_get2y(X,y,random_state=1):
    kf = KFold(n_splits=10, random_state=random_state, shuffle=True)
    all_y = []
    all_probs=[]
    for train_index, test_index in kf.split(X):
        X_train, X_test = X.iloc[train_index], X.iloc[test_index]
        y_train, y_test = y.iloc[train_index], y.iloc[test_index]
        clf = svm.SVC(probability=True,kernel="linear",random_state=0)
        clf.fit(X_train,y_train)
        y_pred = clf.predict(X_test)
        all_probs.extend(clf.fit(X_train,y_train).predict_proba(X_test)[:,1])
        all_y.extend(list(y_test))
    
    all_probs = np.array(all_probs)
    all_y = np.array(all_y)

    return [all_y,all_probs]
