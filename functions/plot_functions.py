import matplotlib.pyplot as plt 
import seaborn as sns
import numpy as np
import pandas as pd
from imblearn.over_sampling import SMOTE
from classification_function import kfold,kfold_get2y
import roc_utils as ru

def plot_age_distribution(dt_combine_fs):
    sns.set_style("whitegrid", {"grid.linestyle": ":"})
    plt.figure(figsize=(10, 6))
    sns.histplot(data = dt_combine_fs, x = "t1_age", color='#0486ba',kde = True)
    plt.xlabel('Age',fontsize=15,labelpad=11)
    plt.ylabel('Frequency',fontsize=15,labelpad=11)
    plt.xlim(18,50)
    plt.show()

def plot_feature_importance(importances_df):
    n = 15
    all_colors = list(plt.cm.colors.cnames.keys())
    np.random.seed(100)
    c = np.random.choice(all_colors, n)
    xlabels = ["PS","RES","PL","BRO","PSS","PRDR","CT","BIS","AS.S","AS.G","AS.L","BAS.R","PSES","BAS.D","BAS.F"]

    plt.figure(figsize=(20,13))
    plt.xlabel("Features", fontsize=25,labelpad=18)
    plt.ylabel("Feature Importance", fontsize=25,labelpad=18)
    plt.xticks(np.arange(1, 16, step=1),fontsize=15)
    plt.xticks(range(0,len(xlabels)),xlabels,fontsize=19)
    plt.yticks(fontsize=19)
    plt.bar(list(importances_df.index), list(importances_df["importance"]), color=c, width=.5, alpha=0.7)
    
def plot_roc_auc_scatter(roc_ls_selected_plot,roc_ls_plot):
    #the comparison (scatter plot of roc auc)
    roc_auc_plot_df_select = pd.DataFrame({"iteration":list(range(1,101,1)),"roc_auc":roc_ls_selected_plot,"predictors":"The four important factors"})
    roc_auc_plot_df_all = pd.DataFrame({"iteration":list(range(1,101,1)),"roc_auc":roc_ls_plot,"predictors":"All factors"})
    roc_auc_plot_df = pd.concat([roc_auc_plot_df_select,roc_auc_plot_df_all],axis=0)
    sns.set(style="whitegrid",rc={'figure.figsize':(15,13)})
    ax = sns.scatterplot(x="iteration", y="roc_auc", hue="predictors",data=roc_auc_plot_df, palette=[(0,0.6,0.8,0.8),(0.8,0.2,0.2,0.8)])
    ax.set_xlabel('Iteration',fontsize=35)
    ax.set_ylabel('ROC-AUC',fontsize=35)
    ax.tick_params(labelsize=20)
    ax.legend(title='Predictors',loc='lower right',fontsize=23,title_fontsize=23)

def scatter_dots_rocauc(X,Y,X_selected,Y_selected):
    #get the oversampling X & Y
    sm = SMOTE(random_state=0)
    X_res, Y_res = sm.fit_resample(X, Y)
    #get the oversampling X_select & Y_select
    sm = SMOTE(random_state=1)
    X_res_selected, Y_res_selected = sm.fit_resample(X_selected, Y_selected)
    #extend the scatter so that the scatter plot looks better
    np.random.seed(1)
    rand_num_ls2 = np.random.choice(10000,10,replace=False)
    #collect the roc auc dot
    roc_ls_plot = []
    roc_ls_selected_plot = []
    for rand in rand_num_ls2:
        roc_ls_plot.extend(kfold(X_res,Y_res,random_state=rand)[0])
        roc_ls_selected_plot.extend(kfold(X_res_selected,Y_res_selected,random_state=rand)[0])
    
    #plot the comparison (scatter plot of roc auc), make all dots in a dataframe
    roc_auc_plot_df_select = pd.DataFrame({"iteration":list(range(1,101,1)),"roc_auc":roc_ls_selected_plot,"predictors":"The four important factors"})
    roc_auc_plot_df_all = pd.DataFrame({"iteration":list(range(1,101,1)),"roc_auc":roc_ls_plot,"predictors":"All factors"})
    roc_auc_plot_df = pd.concat([roc_auc_plot_df_select,roc_auc_plot_df_all],axis=0)

    #plot and show it
    sns.set(style="whitegrid",rc={'figure.figsize':(15,13)})
    ax = sns.scatterplot(x="iteration", y="roc_auc", hue="predictors",data=roc_auc_plot_df, palette=[(0,0.6,0.8,0.8),(0.8,0.2,0.2,0.8)])
    ax.set_xlabel('Iteration',fontsize=35)
    ax.set_ylabel('ROC-AUC',fontsize=35)
    ax.tick_params(labelsize=20)
    ax.legend(title='Predictors',loc='lower right',fontsize=23,title_fontsize=23)

def violin_plot_dimension_differences(dt_combine_fs):
    #create a dataframe to store the participant info and score difference
    transformed_dt_combine_fs = pd.DataFrame(columns = ['t1_participant_code','score','factor','group'])
    four_features = ['t1_RRS_brooding','t1_UCLALS_total','t1_CDRISC_total', 't1_PSS_total']
    
    #get the score of each group
    for participant in dt_combine_fs['t1_participant_code']:
        for var in four_features:
            transformed_dt_combine_fs = transformed_dt_combine_fs.append({'t1_participant_code':participant,
            'score':dt_combine_fs[dt_combine_fs['t1_participant_code']==participant][var].values[0],
            'factor':var,
            'group':dt_combine_fs[dt_combine_fs['t1_participant_code']==participant]['depression_group'].values[0]},ignore_index=True)
    
    #give a formal name to each factor, rather than using the variable name
    transformed_dt_combine_fs['factor'] = transformed_dt_combine_fs['factor'].replace('t1_RRS_brooding','Brooding')
    transformed_dt_combine_fs['factor'] = transformed_dt_combine_fs['factor'].replace('t1_UCLALS_total','UCLA Loneliness')
    transformed_dt_combine_fs['factor'] = transformed_dt_combine_fs['factor'].replace('t1_CDRISC_total','Resilience')
    transformed_dt_combine_fs['factor'] = transformed_dt_combine_fs['factor'].replace('t1_PSS_total','Perceived Stress')
    transformed_dt_combine_fs['group'] = transformed_dt_combine_fs['group'].replace({0:'Low-risk cases',1:'High-risk cases'})
    fix = pd.DataFrame(transformed_dt_combine_fs.to_dict())
    
    #show the violin plot
    violinplt = sns.violinplot(x="score", y="factor",hue="group", data=fix,palette=[(0,0.6,0.8),'red'])
    plt.setp(violinplt.collections, alpha=.8)
    plt.legend(title='Group', fontsize=30,title_fontsize=30,loc='lower right')
    plt.xlabel('Score', fontsize=40)
    plt.ylabel('Factor', fontsize=40)
    plt.tick_params(axis='both', which='major', labelsize=25)

